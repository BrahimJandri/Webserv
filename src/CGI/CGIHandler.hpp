#pragma once

#include "../Utils/Logger.hpp" // Assuming you have a Logger for debug/error output
                               // Make sure your Logger defines macros like LOG_ERROR if used
#include <string>
#include <map>
#include <vector>
#include "../HTTP/Request.hpp"  // For requestParser
#include "../HTTP/Response.hpp" // For Response object
#include <iostream>   // For std::cerr, std::cout
#include <unistd.h>   // For fork, execve, pipe, close, read, write, dup2
#include <sys/wait.h> // For waitpid
#include <vector>     // For std::vector
#include <cstring>    // For strdup, strlen, strerror
#include <sstream>    // For std::istringstream, std::ostringstream (for to_string_c98)
#include <cstdio>     // For perror
#include <cstdlib>    // For exit, EXIT_FAILURE, getenv
#include <cctype>     // For std::toupper (C++98)
#include <errno.h>    // For errno


class CGIHandler
{
public:
    // Constructor: Takes the base path where CGI scripts are located on the filesystem.
    // Example: CGIHandler("/var/www/cgi-bin/");
    CGIHandler(const std::string &cgi_bin_path);
    ~CGIHandler();

    /**
     * @brief Executes a CGI script and captures its output to form an HTTP Response.
     *
     * @param request The parsed HTTP request.
     * @param script_path The requested path to the CGI script (e.g., "/cgi-bin/test.py").
     * This is the path from the web server's root.
     * @param server_name The server's host name (e.g., "localhost").
     * @param server_port The server's listening port (e.g., 8080).
     * @return A Response object containing the HTTP response generated by the CGI script.
     */
    Response execute(const requestParser &request, const std::string &script_path, const std::string &server_name, int server_port);

private:
    std::string _cgi_bin_path;               // The absolute or relative file system path to the CGI script directory
    std::map<std::string, std::string> _env; // Map to store CGI environment variables

    /**
     * @brief Sets up the environment variables for the CGI script based on the HTTP request.
     * @param request The parsed HTTP request.
     * @param script_path The relative path to the CGI script.
     * @param server_name The server's name.
     * @param server_port The server's port.
     */
    void setEnv(const requestParser &request, const std::string &script_path, const std::string &server_name, int server_port);

    /**
     * @brief Converts a std::map<std::string, std::string> to a char** array
     * suitable for execve's envp argument.
     * Memory is allocated using strdup, so it must be freed by freeCstrArray.
     * @param m The map of environment variables.
     * @return A null-terminated char** array.
     */
    char **mapToCstrArray(const std::map<std::string, std::string> &m);

    /**
     * @brief Frees the memory allocated by mapToCstrArray.
     * @param arr The char** array to free.
     */
    void freeCstrArray(char **arr);

    /**
     * @brief Reads all available content from a given file descriptor.
     * @param fd The file descriptor to read from.
     * @return A string containing all read content.
     */
    std::string readFd(int fd);

    /**
     * @brief Creates a Response object for internal CGI errors.
     * @param status_code The HTTP status code for the error.
     * @param message A descriptive error message for the response body.
     * @return A Response object representing the error.
     */
    // Response createErrorResponse(int status_code, const std::string &message);
};
